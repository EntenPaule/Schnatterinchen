# Use:
##   - DUMP_WARNINGS
[gcode_macro DUMP_WAR]
description: Debug: Print all warning messages from klipper
gcode:
  {% set parameters = ["printer.configfile.warnings:"] %}
  {% for warning in printer.configfile.warnings %}
      {% set parameters = parameters.append("%s -> %s -> %s\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}
  {% endfor %}
  {action_respond_info(parameters|join("\n"))}

[gcode_macro M115]
description: Print host and mcu version
rename_existing: M115.1
gcode:
  {% set parameters = namespace(output = 'mcu build version: \n') %}
  {% for name1 in printer %}
    {% for name2 in printer[name1] %}
      {% set show = ['mcu_version'] %}
      {% if name2 is in show %}
        {% set param = "%s: %s" % (name1, printer[name1][name2]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
      {% endif %}
    {% endfor %}
  {% endfor %}
  {action_respond_info(parameters.output)}
  M115.1

#################################################
#################################################
              ###   Macros   ###
#################################################
#################################################

[gcode_macro DUMP_WARNINGS]
description: Debug: Print all warning messages from klipper
gcode:
  {% set parameters = ["printer.configfile.warnings:"] %}
  {% for name1 in printer.configfile.warnings %}
      {% set parameters = parameters.append("%s -> %s -> %s\n%s" % (name1.type, name1.section, name1.option, name1.message)) %}
  {% endfor %}
  {action_respond_info(parameters|join("\n"))}

[gcode_macro MOVE_TEST]
#use: MOVE_TEST F=300
gcode:
  {% set speed = params.F|default(100)|float %} ; speed in mm/s
  {% set x_max = printer.toolhead.axis_maximum.x|float - 25 %}
  {% set y_max = printer.toolhead.axis_maximum.y|float - 25 %}
  {% set x_min = printer.toolhead.axis_minimum.x|float + 25 %}
  {% set y_min = printer.toolhead.axis_minimum.y|float + 25 %}
  # home if needed
  {% if "Printing" not in printer.idle_timeout.state %}
    {% if "xyz" not in printer.toolhead.homed_axes %}
      G28
    {% endif %}
    SAVE_GCODE_STATE NAME=STATE_MOVE_TEST
    #move to start
    G90
    G0 Z50 F600
    G0 X{x_min} Y{y_min} F{speed*60}
    G0 X{x_min} Y{y_max} F{speed*60}
    G0 X{x_max} Y{y_min} F{speed*60}
    G0 X{x_min} Y{y_min} F{speed*60}
    G0 X{x_max} Y{y_max} F{speed*60}
    G0 X{x_max} Y{y_min} F{speed*60}
    G0 X{x_min} Y{y_max} F{speed*60}
    G0 X{x_max} Y{y_max} F{speed*60}
    G0 X{x_min} Y{y_min} F{speed*60}
    RESTORE_GCODE_STATE NAME=STATE_MOVE_TEST
  {% else %}
    {action_respond_info("Not possible during printing!")}
  {% endif %}  

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    _NOZZLE_CLEAN
    QUAD_GANTRY_LEVEL
    G90
    G0 X125 Y125 Z20 F6000

[gcode_macro _CG28]
description: Helper: Conditional homing
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}

[gcode_macro M141]
gcode:
    {% set S = params.S|default(0)|int %}
	SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={S}

[gcode_macro PRINT_START]
gcode:
    {% set extruder = params.EXTRUDER|default(200)|int %}
    {% set bed = params.BED|default(100)|int %}
    {% set chamber = params.CHAMBER|default(50)|int %}
    {% set zoffset = params.zoffset|default(0)|float %}
    {% set mesh = params.MESH|default(default)|string %}
    {% set minTemp = printer.configfile.settings.extruder.min_extrude_temp|int + 5 %}
    G21
    G90
    M83
    M220 S100
    #UPDATE_STATUS_ON_LCD_LED_LOOP action=start
    SET_PIN PIN=caselight VALUE=1
    SET_FAN_SPEED FAN=Nevermore SPEED=0.5
    M104 S{minTemp} 
    M140 S{bed}
    M141 S{chamber}
    M190 S{bed}
    M109 S{minTemp} 
    G32
    PRINT_START_mesh
    #SET_GCODE_OFFSET Z=0
    #QUAD_GANTRY_LEVEL
    #SET_GCODE_OFFSET Z={zoffset}
    G1 X50 Y50 Z5 F6000
    M104 T0 S{extruder}
    M109 T0 S{extruder}
    G92 E0
    G1 E0 F100
    #M221 S95
    G92 E0.0
    G1 Y2 X30 Z0.4 F2000
    G1 X145 E10 F600
    G92 E0

[gcode_macro PRINT_START_mesh]
gcode:
    {% set mesh = params.MESH|default(default)|string %}
    BED_MESH_PROFILE LOAD=default #{mesh} #23062022 #default #KALT #default

#
#	PRINT_END
#
    
[gcode_macro PRINT_END]
gcode:
    {% set X = params.X|default(230)|float %}
    {% set Y = params.Y|default(230)|float %}
    {% set Z = params.Z|default(10)|float %}
    M400                           ; wait for buffer to clear
    TURN_OFF_HEATERS
    SET_FAN_SPEED FAN=Nevermore SPEED=1
    G92 E0                         ; zero the extruder
    G1 E-5.0 F6000                 ; retract filament
    G91                            ; relative positioning
    G0 Z2.00 F20000    ; move nozzle to remove stringing
    M107                           ; turn off fan
    G1 Z{Z} F3000                  ; move nozzle up 10mm
    G90                            ; absolute positioning
    G0  X{X} Y{Y} F3600            ; park nozzle at rear
    BED_MESH_CLEAR
    M18
    #M141 S45
    M355

[gcode_macro UNLOAD_FILAMENT]
gcode:
    M83
    G1 E5 F300
    G1 E-10 F600
    G1 E-80 F900
    M82

[gcode_macro LOAD_FILAMENT]
gcode:
    M83
    G1 E50 F900
    G1 E20 F300
    G1 E10 F150
    G1 E-1 F600
    M82

[gcode_macro Duese]
gcode:
    G0 X125 Y5 Z100 F6000  

[gcode_macro M600]
gcode:
    PAUSE
    UNLOAD_FILAMENT

[gcode_macro _NOZZLE_CLEAN]
description: Clean nozzle
variable_brush_coordinate: [(45,249),(20,249)] 
variable_brush_z: 1 #9         ; z for wipe moves
variable_wipe_count: 10    ; number of full wipes
variable_wipe_offset: 0.1 ; y distance for wipe move
gcode:
  {% set minTemp = printer.configfile.settings.extruder.min_extrude_temp|int + 5 %}
  {% set extruder_target = printer.extruder.target %}
  SAVE_GCODE_STATE NAME=STATE_NOZZLE_CLEAN
  _PRINT_AR T="CLEAN NOZZLE" SHOW_LCD=true
  _CG28
  G90   ; absolute positioning
  G1 E-1.0 F3600                 ; retract filament
  {% if printer.toolhead.position.z|float < 10 %}
    G0 Z10 F1200 ; lift nozzle
  {% endif %}
  G0 X{brush_coordinate[1][0]} Y{brush_coordinate[1][1]} F9000
  {% if printer.extruder.can_extrude|lower == 'false' %}
    {action_respond_info("Extruder Temp to low heat to %2dC" % minTemp)}
    M109 S{minTemp} ; heat extruder and wait
  {% endif %}
  G0 Z{brush_z} F2000
  # move head diagonal to brush
  {% for wipe in range(wipe_count) %}
    {% for coordinate in brush_coordinate %}
      G0 X{coordinate[0]} Y{coordinate[1] + wipe_offset * wipe_count} F15000
    {% endfor %}
  {% endfor %}
  # move to wiper end pos (near to Z endstop)
  G0 X{brush_coordinate[0][0]} Y{brush_coordinate[0][1]} F4000
  G0 X125 Y200 Z10 F4000
  G28 Z
  # restore old extruder temperature
  M104 S{extruder_target}
  M117
  RESTORE_GCODE_STATE NAME=STATE_NOZZLE_CLEAN

[gcode_macro M900]
description: Set Pressure Advance
gcode:
  SET_PRESSURE_ADVANCE ADVANCE={params.K|default(0)}

#################################################
#################################################
              ###   KNÃ–PFE  ###
#################################################
#################################################
[gcode_macro _buttonBlocker]
variable_init: 0
gcode:

[delayed_gcode init_gcodeButtons]
initial_duration: 2.
gcode:
	SET_GCODE_VARIABLE MACRO=_buttonBlocker VARIABLE=init VALUE=1

[gcode_button buttonWarmUp]
pin: z:P1.27
press_gcode:
	{% if printer["gcode_macro _buttonBlocker"].init %}
    	{% if printer.heater_bed.target > 0 %}
    		{ action_respond_info("Button 'WarmUp' pressed and cool down.") }
    		M140 S0
    		M104 S0
    	{% else %}
    		{ action_respond_info("Button 'WarmUp' pressed and warm up.") }
	    	M140 S100
	    	M104 S220
    	{% endif %}
    {% endif %}
release_gcode:

[gcode_button buttonUnload]
pin: z:P1.26
press_gcode:
	{% if printer["gcode_macro _buttonBlocker"].init %}
		{ action_respond_info("Button 'UNLOAD_FILAMENT' pressed.") }
		{% if printer[printer.toolhead.extruder].temperature > 190 %}
			UNLOAD_FILAMENT
		{% else %}
			SET_PIN PIN=caselight VALUE=0.5
			SET_PIN PIN=caselight VALUE=1
			SET_PIN PIN=caselight VALUE=0.5
			SET_PIN PIN=caselight VALUE=1
		{% endif %}
    {% endif %}
release_gcode:

[gcode_button buttonload]
pin: z:P1.28
press_gcode:
	{% if printer["gcode_macro _buttonBlocker"].init %}
		{ action_respond_info("Button 'Load' pressed.") }
		{% if printer[printer.toolhead.extruder].temperature > 190 %}
			LOAD_FILAMENT
		{% else %}
			SET_PIN PIN=caselight VALUE=0.5
			SET_PIN PIN=caselight VALUE=1
			SET_PIN PIN=caselight VALUE=0.5
			SET_PIN PIN=caselight VALUE=1
            
		{% endif %}
    {% endif %}
release_gcode:


#####################################################################
# 	Shell Command
#####################################################################

#[gcode_shell_command leuchte_shell]
#command: curl -X POST -s "http://192.168.2.231/cm?cmnd=Power%20TOGGLE"
#timeout: 2.
#verbose: True
#
#[gcode_macro leuchte]
#gcode:
#    RUN_SHELL_COMMAND CMD=leuchte_shell

#####################################################################
# 	LCD Macro
#####################################################################

[gcode_macro DISPLAY]
description: Toggle Display backlight
variable_state: 'on'
gcode:
  {% if printer["gcode_macro DISPLAY"].state == 'on' %}
    _DISPLAY_OFF
  {% else %}
    _DISPLAY_ON
  {% endif %}
    
[gcode_macro _DISPLAY_STATE]
description: Helper: Print display backlight state
gcode:
  {action_respond_info("LCD display %s" % (printer["gcode_macro DISPLAY"].state))}

[gcode_macro _DISPLAY_OFF]
description: Helper: Display backlight off
gcode:
  SET_GCODE_VARIABLE MACRO=DISPLAY VARIABLE=state VALUE='"off"'
  SET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=0 INDEX=3 TRANSMIT=0
  SET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
  SET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=0 INDEX=1
  _DISPLAY_STATE

[gcode_macro _DISPLAY_ON]
description: Helper: Display backlight on
gcode:
  SET_GCODE_VARIABLE MACRO=DISPLAY VARIABLE=state VALUE='"on"'
  SET_LED LED=fysetc_mini12864 RED=1 GREEN=0.8 BLUE=0.1 INDEX=3 TRANSMIT=0
  SET_LED LED=fysetc_mini12864 RED=1 GREEN=0.8 BLUE=0.1 INDEX=2 TRANSMIT=0
  SET_LED LED=fysetc_mini12864 RED=1 GREEN=0.8 BLUE=0.1 INDEX=1
  _DISPLAY_STATE

[gcode_macro _PRINT_AR]
description: Helper: Action response 
gcode:
  #####  set defaults  #####
  {% set show_lcd = params.SHOW_LCD|default('false') %}
  {% if show_lcd == 'true' %}
    M117 {'%s' % (params.T|string)}
  {% endif %}
  {action_respond_info("%s" % (params.T|string))}
