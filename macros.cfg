#################################################
#################################################
              ###   Macros   ###
#################################################
#################################################

[gcode_macro DUMP_WARNINGS]
description: Debug: Print all warning messages from klipper
gcode:
  {% set parameters = ["printer.configfile.warnings:"] %}
  {% for name1 in printer.configfile.warnings %}
      {% set parameters = parameters.append("%s -> %s -> %s\n%s" % (name1.type, name1.section, name1.option, name1.message)) %}
  {% endfor %}
  {action_respond_info(parameters|join("\n"))}

[gcode_macro MOVE_TEST]
#use: MOVE_TEST F=300
gcode:
  {% set speed = params.F|default(100)|float %} ; speed in mm/s
  {% set x_max = printer.toolhead.axis_maximum.x|float - 25 %}
  {% set y_max = printer.toolhead.axis_maximum.y|float - 25 %}
  {% set x_min = printer.toolhead.axis_minimum.x|float + 25 %}
  {% set y_min = printer.toolhead.axis_minimum.y|float + 25 %}
  # home if needed
  {% if "Printing" not in printer.idle_timeout.state %}
    {% if "xyz" not in printer.toolhead.homed_axes %}
      G28
    {% endif %}
    SAVE_GCODE_STATE NAME=STATE_MOVE_TEST
    #move to start
    G90
    G0 Z50 F600
    G0 X{x_min} Y{y_min} F{speed*60}
    G0 X{x_min} Y{y_max} F{speed*60}
    G0 X{x_max} Y{y_min} F{speed*60}
    G0 X{x_min} Y{y_min} F{speed*60}
    G0 X{x_max} Y{y_max} F{speed*60}
    G0 X{x_max} Y{y_min} F{speed*60}
    G0 X{x_min} Y{y_max} F{speed*60}
    G0 X{x_max} Y{y_max} F{speed*60}
    G0 X{x_min} Y{y_min} F{speed*60}
    RESTORE_GCODE_STATE NAME=STATE_MOVE_TEST
  {% else %}
    {action_respond_info("Not possible during printing!")}
  {% endif %}  

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    _NOZZLE_CLEAN
    QUAD_GANTRY_LEVEL
    QUAD_GANTRY_LEVEL
    G90
    G0 X125 Y125 Z20 F6000

[gcode_macro _CG28]
description: Helper: Conditional homing
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}


#[gcode_macro PRINT_START]
##   Use PRINT_START for the slicer starting script - PLEASE CUSTOMISE THE SCRIPT FOR YOUR SLICER OF CHOICE
#gcode:
#   BED_MESH_CLEAR
#   G21 ;mm mode
#   G90 ; use absolute coordinates
#   M83 ; extruder relative mode
#   #G28 ;HOME ALL
#   QUAD_GANTRY_LEVEL
#   G28 Z
#   G92 E0.0
#   G1 Y2 X30 Z0.3 F2000
#   G1 X145 E10 F600
#   G1 Y2.4 X30 E10 F600
#   G92 E0

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - PLEASE CUSTOMISE THE SCRIPT FOR YOUR SLICER OF CHOICE
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F3600                 ; retract
    G91                            ; relative positioning
    G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
    M104 S0                        ; turn off hotend
    M140 S0                        ; turn off bed
    M106 S0                        ; turn off fan
    G1 Z20 F3000                   ; move nozzle up 20mm
    G90                            ; absolute positioning
    G0  X125 Y245 F3600            ; park nozzle at rear
#    M117 Finished!                 ; display message

[gcode_macro UNLOAD_FILAMENT]
gcode:
    M83
    G1 E10 F300
    G1 E-110 F800
    M82

[gcode_macro LOAD_FILAMENT]
gcode:
    M83
    G1 E750 F3000 #1800
    G1 E30 F300
    G1 E15 F150
    M82

[gcode_macro Duese]
gcode:
    G0 X125 Y5 Z50 F6000  

[gcode_macro M600]
gcode:
    PAUSE
    UNLOAD_FILAMENT

[gcode_macro _NOZZLE_CLEAN]
description: Clean nozzle
variable_brush_coordinate: [(50,249),(20,249)] 
variable_brush_z: 9         ; z for wipe moves
variable_wipe_count: 10    ; number of full wipes
variable_wipe_offset: 0.1 ; y distance for wipe move
gcode:
  {% set minTemp = printer.configfile.settings.extruder.min_extrude_temp|int + 5 %}
  {% set extruder_target = printer.extruder.target %}
  SAVE_GCODE_STATE NAME=STATE_NOZZLE_CLEAN
  _PRINT_AR T="CLEAN NOZZLE" SHOW_LCD=true
  _CG28
  G90   ; absolute positioning
  {% if printer.toolhead.position.z|float < 10 %}
    G0 Z10 F1200 ; lift nozzle
  {% endif %}
  G0 X{brush_coordinate[1][0]} Y{brush_coordinate[1][1]} F9000
  {% if printer.extruder.can_extrude|lower == 'false' %}
    {action_respond_info("Extruder Temp to low heat to %2dC" % minTemp)}
    M109 S{minTemp} ; heat extruder and wait
  {% endif %}
  G0 Z{brush_z} F2000
  # move head diagonal to brush
  {% for wipe in range(wipe_count) %}
    {% for coordinate in brush_coordinate %}
      G0 X{coordinate[0]} Y{coordinate[1] + wipe_offset * wipe_count} F15000
    {% endfor %}
  {% endfor %}
  # move to wiper end pos (near to Z endstop)
  G0 X{brush_coordinate[0][0]} Y{brush_coordinate[0][1]} F4000
  G28 Z
  # restore old extruder temperature
  M104 S{extruder_target}  
  {% if printer.toolhead.position.z|float < 10 %}
    G0 Z10 F1200 ; lift nozzle
  {% endif %}
  M117
  RESTORE_GCODE_STATE NAME=STATE_NOZZLE_CLEAN


#################################################
#################################################
              ###   KNÃ–PFE  ###
#################################################
#################################################

#[gcode_button buttonWarmUp]
#pin: ^z:P1.27
#press_gcode:
#    {% if not printer.print_stats.state == "Printing" %}
#        {% if printer.heater_bed.target > 0 %}
#            { action_respond_info("Button 'WarmUp' pressed and cool down.") }
#            M140 S0
#            M104 S0
#        {% else %}
#            { action_respond_info("Button 'WarmUp' pressed and warm up.") }
#            M140 S100
#            M104 S255
#        {% endif %}
#    {% endif %}
#release_gcode:

#[gcode_button load]
#pin: ^z:P1.26
#press_gcode:
#    {% if not printer.print_stats.state == "Printing" %}
#            { action_respond_info("Button 'LOAD' pressed and UNLOAD.") }
#            UNLOAD_FILAMENT
#        {% else %}
#            { action_respond_info("Button 'LOAD' pressed and LOAD.") }
#            LOAD_FILAMENT
#    {% endif %}
#release_gcode:

#[gcode_button licht]
#pin: ^z:P1.28
#press_gcode:
#    {% if printer["output_pin caselight"].value %}
#            { action_respond_info("Button 'LICHT' pressed and AUS.") }
#            SET_PIN PIN=caselight VALUE=0
#        {% else %}
#            { action_respond_info("Button 'LICHT' pressed and AN.") }
#            SET_PIN PIN=caselight VALUE=1
#    {% endif %}
#release_gcode:

[gcode_button buttonWarmUp]
pin: ^z:P1.27
press_gcode:
	{% if printer.heater_bed.target > 0 %}
		{ action_respond_info("Button 'WarmUp' pressed and cool down.") }
		M140 S0
		M104 S0
	{% else %}
		{ action_respond_info("Button 'WarmUp' pressed and warm up.") }
		M140 S100
		M104 S255
	{% endif %}
release_gcode:

[gcode_button unload]
pin: ^z:P1.26
press_gcode:
    M83
    G1 E10 F300
    G1 E-110 F800
    M82
release_gcode:

[gcode_button load]
pin: ^z:P1.28
press_gcode:
    M83
    G1 E120 F150
    M82
release_gcode:

#####################################################################
# 	LCD Macro
#####################################################################

[gcode_macro DISPLAY]
description: Toggle Display backlight
variable_state: 'on'
gcode:
  {% if printer["gcode_macro DISPLAY"].state == 'on' %}
    _DISPLAY_OFF
  {% else %}
    _DISPLAY_ON
  {% endif %}
    
[gcode_macro _DISPLAY_STATE]
description: Helper: Print display backlight state
gcode:
  {action_respond_info("LCD display %s" % (printer["gcode_macro DISPLAY"].state))}

[gcode_macro _DISPLAY_OFF]
description: Helper: Display backlight off
gcode:
  SET_GCODE_VARIABLE MACRO=DISPLAY VARIABLE=state VALUE='"off"'
  SET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=0 INDEX=3 TRANSMIT=0
  SET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
  SET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=0 INDEX=1
  _DISPLAY_STATE

[gcode_macro _DISPLAY_ON]
description: Helper: Display backlight on
gcode:
  SET_GCODE_VARIABLE MACRO=DISPLAY VARIABLE=state VALUE='"on"'
  SET_LED LED=fysetc_mini12864 RED=1 GREEN=0.8 BLUE=0.1 INDEX=3 TRANSMIT=0
  SET_LED LED=fysetc_mini12864 RED=1 GREEN=0.8 BLUE=0.1 INDEX=2 TRANSMIT=0
  SET_LED LED=fysetc_mini12864 RED=1 GREEN=0.8 BLUE=0.1 INDEX=1
  _DISPLAY_STATE

[gcode_macro _PRINT_AR]
description: Helper: Action response 
gcode:
  #####  set defaults  #####
  {% set show_lcd = params.SHOW_LCD|default('false') %}
  {% if show_lcd == 'true' %}
    M117 {'%s' % (params.T|string)}
  {% endif %}
  {action_respond_info("%s" % (params.T|string))}
